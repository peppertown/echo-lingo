// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  nickname   String   @unique
  created_at DateTime @default(now())
}

model Word {
  id               Int        @id @default(autoincrement())
  word             String
  mean             String
  created_at       DateTime   @default(now())
  isGenerated      Boolean    @default(false)
  level            String
  interval         Int
  next_review_date DateTime
  is_scrapped      Boolean    @default(false)
  Sentence         Sentence[]

  @@index([created_at], name: "created_at_index")
}

model Sentence {
  id         Int      @id @default(autoincrement())
  word_id    Int
  sentence   String
  mean       String
  created_at DateTime @default(now())
  word       Word     @relation(fields: [word_id], references: [id], onDelete: Cascade)

  @@index([word_id], name: "word_id_index")
  @@index([created_at], name: "created_at_index")
}

model Article {
  id               Int                @id @default(autoincrement())
  title            String
  article          String
  interpretation   String
  level            String
  Article_category Article_category[]
}

model Category {
  id               Int                @id @default(autoincrement())
  name             String
  Article_category Article_category[]
}

model Article_category {
  id          Int      @id @default(autoincrement())
  article_id  Int
  category_id Int
  article     Article  @relation(fields: [article_id], references: [id])
  category    Category @relation(fields: [category_id], references: [id])
}
